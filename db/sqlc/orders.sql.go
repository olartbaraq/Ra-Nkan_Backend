// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: orders.sql

package db

import (
	"context"
	"encoding/json"
)

const completeOrder = `-- name: CompleteOrder :one
UPDATE orders SET pay_ref = $2, status = $3 WHERE id = $1 RETURNING id, user_id, items, transaction_ref, pay_ref, status, total_price, created_at, updated_at
`

type CompleteOrderParams struct {
	ID     int64  `json:"id"`
	PayRef string `json:"pay_ref"`
	Status string `json:"status"`
}

func (q *Queries) CompleteOrder(ctx context.Context, arg CompleteOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, completeOrder, arg.ID, arg.PayRef, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Items,
		&i.TransactionRef,
		&i.PayRef,
		&i.Status,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    user_id,
    items,
    transaction_ref,
    total_price,
    pay_ref,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6) RETURNING id, user_id, items, transaction_ref, pay_ref, status, total_price, created_at, updated_at
`

type CreateOrderParams struct {
	UserID         int64           `json:"user_id"`
	Items          json.RawMessage `json:"items"`
	TransactionRef string          `json:"transaction_ref"`
	TotalPrice     string          `json:"total_price"`
	PayRef         string          `json:"pay_ref"`
	Status         string          `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.UserID,
		arg.Items,
		arg.TransactionRef,
		arg.TotalPrice,
		arg.PayRef,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Items,
		&i.TransactionRef,
		&i.PayRef,
		&i.Status,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, user_id, items, transaction_ref, pay_ref, status, total_price, created_at, updated_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrderById(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Items,
		&i.TransactionRef,
		&i.PayRef,
		&i.Status,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrdersByUser = `-- name: GetOrdersByUser :many
select id, user_id, items, transaction_ref, pay_ref, status, total_price, created_at, updated_at FROM orders WHERE user_id = $1
`

func (q *Queries) GetOrdersByUser(ctx context.Context, userID int64) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Items,
			&i.TransactionRef,
			&i.PayRef,
			&i.Status,
			&i.TotalPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
