// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: products.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    name,
    description,
    price,
    images,
    qty_aval,
    shop_id,
    shop_name,
    category_id,
    category_name,
    sub_category_id,
    sub_category_name
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING id, name, description, price, images, qty_aval, shop_id, shop_name, category_id, category_name, sub_category_id, sub_category_name, created_at, updated_at
`

type CreateProductParams struct {
	Name            string   `json:"name"`
	Description     string   `json:"description"`
	Price           string   `json:"price"`
	Images          []string `json:"images"`
	QtyAval         int32    `json:"qty_aval"`
	ShopID          int64    `json:"shop_id"`
	ShopName        string   `json:"shop_name"`
	CategoryID      int64    `json:"category_id"`
	CategoryName    string   `json:"category_name"`
	SubCategoryID   int64    `json:"sub_category_id"`
	SubCategoryName string   `json:"sub_category_name"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		pq.Array(arg.Images),
		arg.QtyAval,
		arg.ShopID,
		arg.ShopName,
		arg.CategoryID,
		arg.CategoryName,
		arg.SubCategoryID,
		arg.SubCategoryName,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		pq.Array(&i.Images),
		&i.QtyAval,
		&i.ShopID,
		&i.ShopName,
		&i.CategoryID,
		&i.CategoryName,
		&i.SubCategoryID,
		&i.SubCategoryName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllProducts = `-- name: DeleteAllProducts :exec
DELETE FROM products
`

func (q *Queries) DeleteAllProducts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllProducts)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProductByCategory = `-- name: GetProductByCategory :many
SELECT id, name, description, price, images, qty_aval, shop_id, shop_name, category_id, category_name, sub_category_id, sub_category_name, created_at, updated_at FROM products WHERE category_id = $1 ORDER BY id
`

func (q *Queries) GetProductByCategory(ctx context.Context, categoryID int64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			pq.Array(&i.Images),
			&i.QtyAval,
			&i.ShopID,
			&i.ShopName,
			&i.CategoryID,
			&i.CategoryName,
			&i.SubCategoryID,
			&i.SubCategoryName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductById = `-- name: GetProductById :one
SELECT id, name, description, price, images, qty_aval, shop_id, shop_name, category_id, category_name, sub_category_id, sub_category_name, created_at, updated_at FROM products WHERE id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		pq.Array(&i.Images),
		&i.QtyAval,
		&i.ShopID,
		&i.ShopName,
		&i.CategoryID,
		&i.CategoryName,
		&i.SubCategoryID,
		&i.SubCategoryName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductByName = `-- name: GetProductByName :many
SELECT id, name, description, price, images, qty_aval, shop_id, shop_name, category_id, category_name, sub_category_id, sub_category_name, created_at, updated_at FROM products WHERE name LIKE '%' || $1 || '%' ORDER BY id
`

func (q *Queries) GetProductByName(ctx context.Context, dollar_1 sql.NullString) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			pq.Array(&i.Images),
			&i.QtyAval,
			&i.ShopID,
			&i.ShopName,
			&i.CategoryID,
			&i.CategoryName,
			&i.SubCategoryID,
			&i.SubCategoryName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByPCS = `-- name: GetProductByPCS :many
SELECT id, name, description, price, images, qty_aval, shop_id, shop_name, category_id, category_name, sub_category_id, sub_category_name, created_at, updated_at FROM products WHERE price = $1 AND sub_category_id = $2 AND category_id = $3 ORDER BY id
`

type GetProductByPCSParams struct {
	Price         string `json:"price"`
	SubCategoryID int64  `json:"sub_category_id"`
	CategoryID    int64  `json:"category_id"`
}

func (q *Queries) GetProductByPCS(ctx context.Context, arg GetProductByPCSParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductByPCS, arg.Price, arg.SubCategoryID, arg.CategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			pq.Array(&i.Images),
			&i.QtyAval,
			&i.ShopID,
			&i.ShopName,
			&i.CategoryID,
			&i.CategoryName,
			&i.SubCategoryID,
			&i.SubCategoryName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByPrice = `-- name: GetProductByPrice :many
SELECT id, name, description, price, images, qty_aval, shop_id, shop_name, category_id, category_name, sub_category_id, sub_category_name, created_at, updated_at FROM products WHERE price = $1 ORDER BY id
`

func (q *Queries) GetProductByPrice(ctx context.Context, price string) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductByPrice, price)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			pq.Array(&i.Images),
			&i.QtyAval,
			&i.ShopID,
			&i.ShopName,
			&i.CategoryID,
			&i.CategoryName,
			&i.SubCategoryID,
			&i.SubCategoryName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByShop = `-- name: GetProductByShop :many
SELECT id, name, description, price, images, qty_aval, shop_id, shop_name, category_id, category_name, sub_category_id, sub_category_name, created_at, updated_at FROM products WHERE shop_name = $1 ORDER BY id
`

func (q *Queries) GetProductByShop(ctx context.Context, shopName string) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductByShop, shopName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			pq.Array(&i.Images),
			&i.QtyAval,
			&i.ShopID,
			&i.ShopName,
			&i.CategoryID,
			&i.CategoryName,
			&i.SubCategoryID,
			&i.SubCategoryName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductBySubCategory = `-- name: GetProductBySubCategory :many
SELECT id, name, description, price, images, qty_aval, shop_id, shop_name, category_id, category_name, sub_category_id, sub_category_name, created_at, updated_at FROM products WHERE sub_category_id = $1 ORDER BY id
`

func (q *Queries) GetProductBySubCategory(ctx context.Context, subCategoryID int64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductBySubCategory, subCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			pq.Array(&i.Images),
			&i.QtyAval,
			&i.ShopID,
			&i.ShopName,
			&i.CategoryID,
			&i.CategoryName,
			&i.SubCategoryID,
			&i.SubCategoryName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllProducts = `-- name: ListAllProducts :many
SELECT id, name, description, price, images, qty_aval, shop_id, shop_name, category_id, category_name, sub_category_id, sub_category_name, created_at, updated_at FROM products ORDER BY id LIMIT $1 OFFSET $2
`

type ListAllProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllProducts(ctx context.Context, arg ListAllProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listAllProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			pq.Array(&i.Images),
			&i.QtyAval,
			&i.ShopID,
			&i.ShopName,
			&i.CategoryID,
			&i.CategoryName,
			&i.SubCategoryID,
			&i.SubCategoryName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllProductsByOrders = `-- name: ListAllProductsByOrders :many
SELECT
    p.id AS product_id,
    p.name AS product_name,
    COUNT(o.id) AS order_count
FROM
    products p
LEFT JOIN
    orders o ON p.id = o.product_id
GROUP BY
    p.id, p.name
ORDER BY
    order_count DESC
`

type ListAllProductsByOrdersRow struct {
	ProductID   int64  `json:"product_id"`
	ProductName string `json:"product_name"`
	OrderCount  int64  `json:"order_count"`
}

func (q *Queries) ListAllProductsByOrders(ctx context.Context) ([]ListAllProductsByOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllProductsByOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllProductsByOrdersRow{}
	for rows.Next() {
		var i ListAllProductsByOrdersRow
		if err := rows.Scan(&i.ProductID, &i.ProductName, &i.OrderCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products SET name = $2, qty_aval = $6, description = $5, price = $4, images = $3, updated_at = $7 WHERE id = $1 RETURNING id, name, description, price, images, qty_aval, shop_id, shop_name, category_id, category_name, sub_category_id, sub_category_name, created_at, updated_at
`

type UpdateProductParams struct {
	ID          int64     `json:"id"`
	Name        string    `json:"name"`
	Images      []string  `json:"images"`
	Price       string    `json:"price"`
	Description string    `json:"description"`
	QtyAval     int32     `json:"qty_aval"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		pq.Array(arg.Images),
		arg.Price,
		arg.Description,
		arg.QtyAval,
		arg.UpdatedAt,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		pq.Array(&i.Images),
		&i.QtyAval,
		&i.ShopID,
		&i.ShopName,
		&i.CategoryID,
		&i.CategoryName,
		&i.SubCategoryID,
		&i.SubCategoryName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
